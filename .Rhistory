message = FALSE,     # no mostrar mensajes
results = 'hide'
)
library(factoextra)
library(FactoMineR)
library(readr)
library(corrplot)
library(dplyr)
library(knitr)
library(gridExtra)
library(tidyr)
library(GGally)
# 1. Cargar el dataset
nba_ajustado <- read.csv("nba_2022_2023_ajustado_limpio.csv", as.is = TRUE)
head(nba_ajustado)
nba <- read.csv("nba_2022_2023.csv", as.is = TRUE)
# 2. Construir la tabla de descripción
categ_vars <- c("all_stars")
descNBA <- data.frame(
Variable     = colnames(nba_ajustado),
Tipo_de_Dato = ifelse(
colnames(nba_ajustado) %in% categ_vars,
"categorica",
sapply(nba_ajustado, class)
),
stringsAsFactors = FALSE
)
print(descNBA)
# 3. Centrar y escalar los datos
vars_excluir <- c( "edad", "all_stars",
"partidos_jugados", "partidos_titular")
# Seleccionar las variables numéricas a transformar (sin las excluidas)
vars_num <- nba_ajustado %>%
select(where(is.numeric)) %>%
select(-all_of(vars_excluir)) %>%
colnames()
# Centrar y escalar solo las variables seleccionadas
nba_z <- nba_ajustado
nba_z[vars_num] <- scale(nba_ajustado[vars_num])
# Ver los resultados
head(nba_z)
# 1. Variables que NO se utilizarán en el PCA
vars_excluir <- c("edad", "all_stars",
"partidos_jugados", "partidos_titular", "rebotes_aj")
# 2. Selección de variables numéricas que SÍ se utilizarán
vars_num <- nba_z %>%
select(where(is.numeric)) %>%
select(-all_of(vars_excluir)) %>%
colnames()
# 3. Calcular la matriz de correlaciones solo con las variables seleccionadas
corr_matrix <- cor(nba_z[vars_num])
# 4. Visualización de la matriz de correlaciones
corrplot(
corr_matrix,
method = "color",
type = "upper",
tl.col = "black",
tl.cex = 0.8,
number.cex = 0.7,
addCoef.col = "black",
col = colorRampPalette(c("blue", "white", "red"))(200),
diag = FALSE
)
# 5. Eliminar variables con correlación alta (r > 0.9) de forma manual y controlada
vars_eliminar <- c(
"tiros_anotados_aj",
"tiros_intentados_aj",
"triples_anotados_aj",
"tiros_2_anotados_aj",
"tiros_2_intentados_aj",
"tl_anotados_aj",
"robos_aj"
)
# Actualizamos la selección de variables numéricas para el PCA
vars_num_final <- setdiff(vars_num, vars_eliminar)
# Confirmamos las variables finales que entran al PCA
vars_num_final
# 6. Matriz de correlaciones final, para verificar que no quedan redundancias excesivas
corr_matrix_final <- cor(nba_z[vars_num_final])
# Visualización de la nueva matriz de correlaciones
corrplot(
corr_matrix_final,
method = "color",
type = "upper",
tl.col = "black",
tl.cex = 1.2,
number.cex = 1,
addCoef.col = "black",
col = colorRampPalette(c("blue", "white", "red"))(200),
diag = FALSE
)
# 1. Crear el dataframe definitivo que se usará en el PCA
nba_pca <- nba_z[, c(
vars_num_final,                # Variables activas para el PCA
"posicion", "all_stars",       # Variables cualitativas suplementarias
"partidos_jugados", "partidos_titular", "jugador"  # Variables cuantitativas suplementarias
)]
# 2. Visualizamos la estructura de la tabla final antes de aplicar el PCA
str(nba_pca)
#3. Realizamos PCA
pca_res <- PCA(
nba_pca,
scale.unit = FALSE,  # Ya está escalado
quali.sup = which(colnames(nba_pca) %in% c("posicion", "all_stars", "jugador")),
quanti.sup = which(colnames(nba_pca) %in% c("partidos_jugados", "partidos_titular")),
graph = FALSE
)
# 4. Calcular los valores propios (varianza explicada)
eig.val <- get_eigenvalue(pca_res)
# 5. Calcular la varianza explicada media (para trazar la línea de referencia)
VPmedio <- 100 * (1 / nrow(eig.val))
# 6. Graficar la varianza explicada con la línea de la media
fviz_eig(pca_res, addlabels = TRUE) +
geom_hline(yintercept = VPmedio, linetype = 2, color = "red")
kable(eig.val[1:7,])
K = 2
pca_res <- PCA(
nba_pca,
scale.unit = FALSE,  # Ya está escalado
quali.sup = which(colnames(nba_pca) %in% c("posicion", "all_stars", "jugador")),
quanti.sup = which(colnames(nba_pca) %in% c("partidos_jugados", "partidos_titular")),
graph = FALSE,
ncp = K
)
# 1. Extraer las coordenadas (scores) de los jugadores en los K primeros componentes
misScores <- pca_res$ind$coord[, 1:K]
# 3. Calcular la estadística Hotelling's T² para cada jugador
miT2 <- colSums(t(misScores^2) / eig.val[1:K, 1])
# 4. Calcular los umbrales de control (F-distribution thresholds)
I <- nrow(nba_pca)  # Número de jugadores (individuos)
F95 <- K * (I^2 - 1) / (I * (I - K)) * qf(0.95, K, I - K)  # Umbral del 95%
F99 <- K * (I^2 - 1) / (I * (I - K)) * qf(0.99, K, I - K)  # Umbral del 99%
# 5. Gráfico de Hotelling T² para detección de anomalías
plot(
1:length(miT2), miT2, type = "p",
xlab = "Jugadores",
ylab = "Estadístico T² de Hotelling",
main = "Detección de Anomalías con Hotelling T²"
)
abline(h = F95, col = "orange", lty = 2, lwd = 2)  # Umbral 95%
abline(h = F99, col = "red3", lty = 2, lwd = 2)    # Umbral 99%
anomalas = which(miT2 > F95)
anomalas # Jugadores anómalos)
# 1. Crear un factor para marcar observaciones normales y anómalas
anomalia_factor <- factor(miT2 > F95, labels = c("Normal", "Anómalo"))
# 2. Primer gráfico: Componentes 1 vs 2
p1 <- fviz_pca_ind(
pca_res,
axes = c(1, 2),
geom = "point",
habillage = anomalia_factor,
palette = c("grey", "red"),
addEllipses = FALSE,
legend.title = "Tipo"
) +
ggtitle("Componentes 1 vs 2") +
theme_minimal()
# 3. Mostrar los dos gráficos en una sola fila
p1
# 6. Resumen de jugadores anómalos
anomalos_df = nba_pca[anomalas, c("jugador", "posicion", "all_stars", "partidos_jugados", "partidos_titular")]
anomalos_df
# Ordenar por mayor valor de T² (miT2)
anomalos_df <- nba_pca[anomalas, c("jugador", "posicion", "all_stars", "partidos_jugados", "partidos_titular")]
# Añadir la columna con la puntuación T²
anomalos_df$T2 <- miT2[anomalas]
# Ordenar de mayor a menor T²
anomalos_df <- anomalos_df[order(-anomalos_df$T2), ]
# Ver el resultado
head(anomalos_df)
contribT2 = function (X, scores, loadings, eigenval, observ, cutoff = 2) {
# X is data matrix and must be centered (or centered and scaled if data were scaled)
misScoresNorm = t(t(scores**2) / eigenval)
misContrib = NULL
for (oo in observ) {
print(rownames(scores)[oo])
print(scores[oo,])
misPCs = which(as.numeric(misScoresNorm[oo,]) > cutoff)
lacontri = sapply(misPCs, function (cc) (scores[oo,cc]/eigenval[cc])*loadings[,cc]*X[oo,])
lacontri = rowSums((1*(sign(lacontri) == 1))*lacontri)
misContrib = cbind(misContrib, lacontri)
}
colnames(misContrib) = rownames(misScoresNorm[observ,])
return(misContrib)
}
# 1. Filtrar los jugadores anómalos
jugadores_anom <- c("Giannis Antetokounmpo", "Joel Embiid", "Luka Doncic", "Trae Young", "Damian Lillard", "Walker Kessler")
observ_anom <- which(nba_pca$jugador %in% jugadores_anom)
misLoadings = sweep(pca_res$var$coord, 2, sqrt(pca_res$eig[1:K,1]), FUN="/")
X = as.matrix(nba_pca[vars_num_final])
# 2. Calcular las contribuciones de las variables
mycontrisT2 = contribT2(
X = X,
scores = misScores,
loadings = misLoadings,
eigenval = eig.val[1:K, 1],
observ = observ_anom
)
# 3. Visualizar las contribuciones de cada jugador anómalo
for (i in seq_along(observ_anom)) {
jugador_nombre <- nba_pca$jugador[observ_anom[i]]
par(mar = c(10, 2.3, 3, 1))  # Ajuste de márgenes para nombres largos
barplot(
mycontrisT2[, i],
las = 2,
main = paste0("Jugador: ", jugador_nombre),
col = "steelblue",
ylab = "Contribución a T²"
)
}
# 1. Definir X: Datos centrados y escalados solo con las variables activas del PCA
X <- as.matrix(nba_pca[, vars_num_final])
# 2. Recuperar los loadings "puros" (deshaciendo la ponderación de FactoMineR)
misLoadings <- sweep(
pca_res$var$coord[, 1:K],
2,
sqrt(pca_res$eig[1:K, 1]),
FUN = "/"
)
# 3. Calculamos la matriz de residuos (reconstrucción aproximada y error)
myE <- X - misScores[, 1:K] %*% t(misLoadings)
# 4. Cálculo de la SCR (suma de los cuadrados de los residuos)
mySCR <- rowSums(myE^2)
# 5. Calculamos los umbrales de control usando la distribución Chi-cuadrado
g <- var(mySCR) / (2 * mean(mySCR))
h <- (2 * mean(mySCR)^2) / var(mySCR)
chi2lim_95 <- g * qchisq(0.95, df = h)   # Umbral al 95%
chi2lim_99 <- g * qchisq(0.99, df = h)   # Umbral al 99%
# 6. Visualización de la Distancia al Modelo (SCR)
plot(
1:length(mySCR), mySCR, type = "l",
main = "Distancia al Modelo PCA (SCR)",
ylab = "SCR", xlab = "Jugadores",
ylim = c(0, max(mySCR) * 1.1)
)
abline(h = chi2lim_95, col = "orange", lty = 2, lwd = 2)  # Límite 95%
abline(h = chi2lim_99, col = "red3", lty = 2, lwd = 2)    # Límite 99%
# 7. Identificar jugadores con SCR alto
jugadores_scr_95 <- which(mySCR > chi2lim_95)
jugadores_scr_99 <- which(mySCR > chi2lim_99)
# 8. Mostrar nombres de los jugadores anómalos por SCR
jugadores_95 <- nba_pca$jugador[jugadores_scr_95]
jugadores_99 <- nba_pca$jugador[jugadores_scr_99]
print("Jugadores con SCR > 95%:")
print(jugadores_95)
print("Jugadores con SCR > 99%:")
print(jugadores_99)
# 1. Lista fija de jugadores con SCR > 99%
jugadores_scr_99 <- c("Ben Simmons", "Brook Lopez", "Jaren Jackson Jr.",
"Jimmy Butler", "Ryan Rollins")
# 2. Localizamos las observaciones en el dataframe
observ_scr_99 <- which(nba_pca$jugador %in% jugadores_scr_99)
# 3. Visualizamos las contribuciones a la SCR para cada jugador
for (i in 1:length(observ_scr_99)) {
jugador_nombre <- nba_pca$jugador[observ_scr_99[i]]
# Calculamos las contribuciones de cada variable (residuo al cuadrado)
residuos_jugador <- myE[observ_scr_99[i], ]^2
par(mar = c(10, 2.3, 3, 1))  # Ajuste de márgenes para nombres largos
barplot(
residuos_jugador,
names.arg = colnames(X),
las = 2,
main = paste0("Jugador: ", jugador_nombre, "\nContribuciones a la SCR"),
col = "darkorange",
ylab = "Contribución a SCR"
)
}
# Visualización de las variables en los dos primeros componentes principales
fviz_pca_var(
pca_res,
axes = c(1, 2),
repel = TRUE,  # Evita que los nombres de las variables se solapen
col.var = "contrib",  # Colorea según la contribución de las variables
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),  # De menor a mayor contribución
title = "Representación de Variables (Dim 1 y 2)"
)
# 1. Crear un subconjunto eliminando las variables auxiliares
vars_principales <- setdiff(vars_num_final, c("partidos_jugados", "partidos_titular"))
# 2. Visualizar solo las variables activas que participaron en el PCA
fviz_pca_var(
pca_res,
axes = c(1, 2),
select.var = list(name = vars_principales),  # Solo las variables activas
repel = TRUE,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
title = "Representación de Variables Activas (Dim 1 y 2)"
)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor = 5, ...) {
par(usr = c(0, 1, 0, 1))
r <- cor(x, y, use = "complete.obs")
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
# Aquí controlas el tamaño de la fuente (ajústalo si quieres aún más grande)
text(0.5, 0.5, txt, cex = cex.cor * abs(r), font = 2)
}
# Variables ofensivas
vars_ofensivas <- c("puntos_aj", "tl_intentados_aj", "perdidas_aj",
"partidos_jugados", "partidos_titular")
pairs(
nba_pca[, vars_ofensivas],
lower.panel = panel.cor,
pch = 20,
col = "red3",
main = "Matriz de Dispersión - Variables Ofensivas"
)
# Variables defensivas
vars_defensivas <- c("ro_aj", "rd_aj", "asistencias_aj", "tapones_aj", "faltas_aj", "partidos_jugados", "partidos_titular")
pairs(
nba_pca[, vars_defensivas],
lower.panel = panel.cor,
pch = 20,
col = "steelblue",
main = "Matriz de Dispersión - Variables Defensivas"
)
fviz_pca_ind(
pca_res,
axes = c(1, 2),
geom = "point",   # Solo puntos, sin etiquetas
habillage = "posicion",
addEllipses = TRUE,
palette = "jco",
legend.title = "Posición",
pointsize = 2.5
)
fviz_pca_biplot(
pca_res,
axes = c(1, 2),
label = "var",
repel = TRUE,
col.var = "black",              # Variables en negro (sin gradiente de contribución)
select.var = list(name = c(      # Eliminar variables no deseadas
"tripes_intentados_aj", "tl_intentados_aj", "ro_aj", "rd_aj",
"asistencias_aj", "tapones_aj", "perdidas_aj", "faltas_aj", "puntos_aj"
)),
col.ind = nba_pca$posicion,     # Colorear por posición
palette = "jco",
addEllipses = FALSE,
legend.title = "Posición",
labelsize = 4,
pointsize = 2.5
)
save(nba_pca, file = "nba_pca.RData")
knitr::opts_chunk$set(
echo  = FALSE,   # no muestra el código
cache = TRUE,    # sigue cacheando los resultados
message = FALSE, # opcional: oculta mensajes de paquetes
warning = FALSE  # opcional: oculta warnings
)
library(knitr)
library(cluster)
library(FactoMineR)
library(factoextra)
library(NbClust)
library(clValid)
library(tidyverse)
load("nba_pca.RData", verbose = TRUE)
rownames(nba_pca) <- nba_pca$jugador
nba_pca$Jugador  <- NULL
# Seleccionar solo variables numéricas para clustering
df_num <- nba_pca %>% select(where(is.numeric))
# 1) Calcula la matriz de distancias Manhattan
midist <- dist(df_num, method = "manhattan")
# 2) Visualiza la matriz de distancias
fviz_dist(
midist,
show_labels = TRUE,
lab_size    = 0.3,
gradient    = list(low = "#00AFBB", mid = "white", high = "#FC4E07")
) +
labs(title = "Distancia Manhattan entre jugadores")
library(factoextra)
library(gridExtra)
# Ward jerárquico (hcut) — Silhouette y WSS
p1 <- fviz_nbclust(
x          = df_num,
FUNcluster = hcut,
method     = "silhouette",
hc_method  = "ward.D2",
k.max      = 10,
diss       = midist,
verbose    = FALSE
) + labs(title = "Ward (silhouette)")
p2 <- fviz_nbclust(
x          = df_num,
FUNcluster = hcut,
method     = "wss",
hc_method  = "ward.D2",
k.max      = 10,
diss       = midist,
verbose    = FALSE
) + labs(title = "Ward (WSS)")
grid.arrange(p1, p2, ncol = 2)
# K-means — Silhouette y WSS
p3 <- fviz_nbclust(
x          = df_num,
FUNcluster = kmeans,
method     = "silhouette",
k.max      = 10,
verbose    = FALSE
) + labs(title = "K-means (silhouette)")
p4 <- fviz_nbclust(
x          = df_num,
FUNcluster = kmeans,
method     = "wss",
k.max      = 10,
verbose    = FALSE
) + labs(title = "K-means (WSS)")
grid.arrange(p3, p4, ncol = 2)
# K-medoides (PAM) — Silhouette y WSS
p5 <- fviz_nbclust(
x          = df_num,
FUNcluster = pam,
method     = "silhouette",
k.max      = 10,
verbose    = FALSE
) + labs(title = "PAM (silhouette)")
p6 <- fviz_nbclust(
x          = df_num,
FUNcluster = pam,
method     = "wss",
k.max      = 10,
verbose    = FALSE
) + labs(title = "PAM (WSS)")
grid.arrange(p5, p6, ncol = 2)
library(cluster)
library(ggsci)   # para pal_npg
# --- 1) Calcula los tres clusterings a k = 4 (o el que necesites) ---
k <- 10
# Ward jerárquico
clust1  <- hclust(midist, method = "ward.D2")
grupos1 <- cutree(clust1, k = k)
# K-means sobre df_num
set.seed(42)
km_res  <- kmeans(df_num, centers = k, nstart = 25)
# PAM (K-medoides) sobre df_num
pam_res <- pam(df_num, k = k)
# --- 2) Define paletas de color ---
colores_wk <- pal_npg("nrc")(k)
colores_km <- pal_npg("nrc")(k)
colores_pm <- pal_npg("nrc")(k)
# --- 3) Grafica las siluetas en 1×3 ---
par(mfrow = c(1, 3), mar = c(4, 4, 3, 1))
# 1) Silueta Ward
plot(
silhouette(grupos1, midist),
col    = colores_wk,
border = NA,
main   = paste0("WARD (k=", k,")")
)
# 2) Silueta K-means
plot(
silhouette(km_res$cluster, midist),
col    = colores_km,
border = NA,
main   = paste0("K-MEANS (k=", k,")")
)
# 3) Silueta PAM
plot(
silhouette(pam_res$clustering, midist),
col    = colores_pm,
border = NA,
main   = paste0("PAM (k=", k,")")
)
set.seed(42)
# Ejecuta K-medias con 10 clústeres sobre tus variables numéricas
km_res15 <- kmeans(df_num, centers = 10, nstart = 25)
# Muestra la tabla de tamaños de cada clúster
table(km_res15$cluster)
# 1) Asigna el cluster a tu tabla completa
nba_pca$cluster_km <- factor(km_res15$cluster)
# 2) Tabla de jugadores por clúster y posición
tabla_cluster <- nba_pca %>%
select(Jugador = jugador, Posición = posicion, Cluster = cluster_km) %>%
arrange(Cluster, Posición, Jugador)
tabla_cluster %>%
kable(
caption   = "Jugadores agrupados por clúster y posición",
row.names = FALSE
)
# 3) Tabla de perfiles medios de variables numéricas por clúster
tabla_perfiles <- df_num %>%
mutate(Cluster = km_res15$cluster) %>%
group_by(Cluster) %>%
summarise(across(everything(), mean))
tabla_perfiles %>%
kable(
caption = "Perfiles medios de cada clúster (K-means)",
digits  = 2
)
get_sustitutos <- function(nombre) {
# Extraemos el clúster y la posición del jugador
info <- nba_pca %>%
filter(jugador == nombre) %>%
select(cluster_km, posicion) %>%
slice(1)
if (nrow(info) == 0) {
stop("No existe ese jugador en la base de datos.")
}
cl  <- info$cluster_km
pos <- info$posicion
# Filtramos compañeros de clúster y posición, excluyendo al jugador original
nba_pca %>%
filter(cluster_km == cl,
posicion   == pos,
jugador    != nombre) %>%
select(Jugador = jugador,
Posición = posicion,
Cluster  = cluster_km)
}
get_sustitutos("T.J. McConnell")
get_sustitutos("Santi Aldama")
